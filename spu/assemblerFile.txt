jmp main

deskriminati:
pop [2]
pop [1]
pop [0]
push 0
pop [3]
push [1]
push [1]
mul
push 4
push [0]
mul
push [2]
mul
sub
pop [3]
push [3]
ret

main:
push 0
pop [4]
push 0
pop [5]
push 0
pop [6]
in
pop [4]
in
pop [5]
in
pop [6]
push [4]
push [5]
push [6]
call deskriminati
pop [7]
push [7]
push 0
jbe endIf_0
push [7]
sqrt
pop [8]
push 0
push [5]
sub
push [8]
sub
push 2
push [4]
mul
div
pop [9]
push 0
push [5]
sub
push [8]
add
push 2
push [4]
mul
div
pop [10]
push [9]
out
push [10]
out
jmp endIf_0
endIf_0:
push [7]
push 0
jhe endIf_1
push 0
push [5]
sub
push 2
push [4]
mul
div
pop [11]
push [11]
out
jmp endIf_1
endIf_1:
hlt
